import pytest 
from dz_5.ex5_1 import binnary_search

@pytest.mark.parametrize(
   ('k', 'pos', 'result'),
   [
       (2, [1, 2, 3, 4, 5], 1),
       (-2, [-2, -1, 0, 1, 2, 3], 0),
       (0, [0, 0, 1, 2, 3, 4, 5], 0),
       (6, [6, 6, 6, 6, 6, 6, 6], 0),
       (-1, [-4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 3),
       (-4, [-5, -4, -4, -4, 0, 1, 3], 1),
       (13, [1, 2, 3, 4, 4, 4, 6, 9, 13], 8),
       (7, [0, 1, 2, 3, 4, 5, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 11], 6),
       (0, [0], 0),
       (0, [-1, 0, 42], 1),
       (42, [-42, 0, 42], 2),
       (-4, [-6, -5, -4, -3, -2, -1], 2),
       (4, [1, 2, 3, 4, 5, 6], 3),
       (4, [1, 2, 3, 4, 5, 6, 7], 3),
       (42, [42, 42, 42, 42, 42], 0),
       (-42, [-42, -42, -42, -42, -42, -42], 0),
       (43, [42, 42, 42, 42, 43], 4),
       (-1, [-2, -2, -1, 0, 1, 2, 2, 2], 2),
       (1, [-2, -2, -1, 0, 1, 2, 2, 2], 4)
   ] 
)

def test_binnary_search(k, pos, result):
    assert binnary_search(k, pos) == result

@pytest.mark.parametrize(
   ('k1', 'pos1'),
   [
       (42, []),
       (0, [1]),
       (7, [1, 2, 3, 4, 5]),
       (1, [0])
   ]
)
def test_binary_search(k1, pos1):
    assert binnary_search(k1, pos1) is None